Directory structure:
└── blog3/
    ├── README.md
    ├── components.json
    ├── jsconfig.json
    ├── next.config.js
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── .eslintrc.json
    ├── app/
    │   ├── globals.css
    │   ├── layout.jsx
    │   ├── page.jsx
    │   ├── about/
    │   │   └── page.jsx
    │   ├── archives/
    │   │   └── page.jsx
    │   ├── categories/
    │   │   ├── page.jsx
    │   │   └── [slug]/
    │   │       └── page.jsx
    │   ├── fonts/
    │   │   ├── GeistMonoVF.woff
    │   │   └── GeistVF.woff
    │   └── post/
    │       └── [slug]/
    │           └── page.jsx
    ├── components/
    │   ├── Footer.jsx
    │   ├── Header.jsx
    │   └── MarkdownRenderer.jsx
    ├── lib/
    │   ├── markdown.js
    │   └── utils.js
    └── public/
        └── images/

================================================
File: README.md
================================================
# **Garhlz 的个人博客**  
这是一个基于 **Next.js** 和 **Tailwind CSS** 构建的个人博客，采用 **Markdown** 作为内容源，支持 **文章分类、归档** 和 **动态渲染**。博客主要用于记录 **开发日志、刷题笔记** 以及 **技术分享**。  

---

## **技术栈**  
- **框架**：Next.js 14  
- **样式**：Tailwind CSS + 自定义 CSS  
- **字体**：Geist（Next.js 官方字体）  
- **Markdown 处理**：unified, remark, rehype  
- **图标**：Lucide React  

---

## **功能特性**  
✅ **Markdown 渲染**：支持 GFM、数学公式（KaTeX）、代码高亮（Prism）。  
✅ **动态目录**：包含顶部折叠目录和侧边滚动目录，提升阅读体验。  
✅ **响应式设计**：适配桌面与移动端，提供流畅的访问体验。  
✅ **SEO 优化**：使用 `generateMetadata` 生成动态页面标题，提升搜索引擎可见性。  

---

## **页面概览**  
- **🏠 首页 (`app/page.jsx`)**  
  - 展示所有文章列表，按日期降序排列。  
  - 文章包含 **标题、发布日期、阅读时长、分类、摘要**。  
  - 无文章时提供占位提示。  

- **👤 关于 (`app/about/page.jsx`)**  
  - 显示个人介绍，默认从 `content/about.md` 读取内容。  
  - 若文件缺失，则使用默认介绍文案。  

- **📁 归档 (`app/archives/page.jsx`)**  
  - 文章按 **年月归档**，支持日期排序和跳转。  
  - 显示文章总数，方便回顾历史内容。  

- **📂 分类 (`app/categories/page.jsx`)**  
  - 展示所有分类及其文章数量，可点击进入分类详情。  
  - **子分类页面 (`app/categories/[slug]/page.jsx`)**：列出该分类下的文章。  

- **📝 文章详情 (`app/post/[slug]/page.jsx`)**  
  - 根据 **slug** 动态渲染 Markdown 文章。  
  - 支持 **目录导航、分类标签、阅读进度指示器**，优化阅读体验。  

---
## 开发日志
[开发日志](/content/博客开发日志.md)


================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: jsconfig.json
================================================
{
    "compilerOptions": {
      "baseUrl": ".",
      "paths": {
        "@/*": ["./*"]
      }
    }
  }


================================================
File: next.config.js
================================================
module.exports = {
    
  };
  
  


================================================
File: package.json
================================================
{
  "name": "next-blog",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "postcss": "postcss app/globals.css -o app/output.css"
  },
  "dependencies": {
    "gray-matter": "^4.0.3",
    "katex": "^0.16.21",
    "lucide-react": "^0.294.0",
    "next": "14.0.4",
    "react": "^18",
    "react-dom": "^18",
    "rehype-katex": "^7.0.1",
    "rehype-prism-plus": "^1.6.3",
    "rehype-raw": "^7.0.0",
    "rehype-stringify": "^10.0.0",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.0",
    "remark-html": "^16.0.1",
    "remark-math": "^6.0.0",
    "remark-parse": "^11.0.0",
    "remark-rehype": "^11.0.0",
    "tailwindcss-animate": "^1.0.7",
    "unified": "^11.0.4",
    "unist-util-visit": "^5.0.0"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.16",
    "autoprefixer": "^10.4.15",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.31",
    "postcss-cli": "^10.1.0",
    "tailwindcss": "^3.4.17"
  }
}



================================================
File: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}, // 娣诲姞 autoprefixer 鎻掍欢
  },
};




================================================
File: tailwind.config.js
================================================
module.exports = {
  darkMode: ["class"],
  content: [
    "./app/**/*.{js,jsx}",
    "./components/**/*.{js,jsx}",
    "./content/**/*.{md,mdx}", // 支持 Markdown 中的类名
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: "rgb(186, 163, 132)",
        "primary-hover": "rgb(166, 143, 112)",
        "header-bg": "rgb(245, 242, 235)",
        "card-bg": "rgb(255, 255, 255)",
        secondary: {
          DEFAULT: "#10b981",
          foreground: "#ffffff",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: "100%",
            color: "#333",
            a: {
              color: "rgb(186, 163, 132)",
              "&:hover": {
                color: "rgb(166, 143, 112)",
              },
            },
            pre: {
              backgroundColor: "#1f2937",
              color: "#e5e7eb",
              overflowX: "auto",
              fontSize: "0.875em",
            },
            code: {
              color: "#111827",
              backgroundColor: "#f3f4f6",
              paddingLeft: "0.25rem",
              paddingRight: "0.25rem",
              paddingTop: "0.125rem",
              paddingBottom: "0.125rem",
              borderRadius: "0.25rem",
            },
            "code::before": {
              content: '""',
            },
            "code::after": {
              content: '""',
            },
            "pre code": {
              color: "inherit",
              backgroundColor: "transparent",
              padding: "0",
            },
          },
        },
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
}




================================================
File: .eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}



================================================
File: app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground: 51, 51, 51;
  --background: 250, 248, 245;
}

body {
  color: rgb(var(--foreground));
  background: rgb(var(--background));
  
}

@layer components {
  /* 自定义 Markdown 内容样式 */
  .markdown-content {
    @apply text-gray-800 leading-relaxed;
  }

  .markdown-content h1 {
    @apply text-3xl font-bold mt-8 mb-4 scroll-mt-20;
  }

  .markdown-content h2 {
    @apply text-2xl font-bold mt-6 mb-3 scroll-mt-20;
  }

  .markdown-content h3 {
    @apply text-xl font-bold mt-5 mb-2 scroll-mt-20;
  }

  .markdown-content h4 {
    @apply text-lg font-bold mt-4 mb-2 scroll-mt-20;
  }

  .markdown-content p {
    @apply my-4;
  }

  .markdown-content ul {
    @apply list-disc pl-6 my-4;
  }

  .markdown-content ol {
    @apply list-decimal pl-6 my-4;
  }

  .markdown-content li {
    @apply mb-1;
  }

  .markdown-content a {
    @apply text-primary hover:text-primary-hover underline;
  }

  .markdown-content blockquote {
    @apply border-l-4 border-primary pl-4 italic my-4 text-gray-600;
  }

  .markdown-content img {
    @apply max-w-full rounded-lg my-6 mx-auto;
  }

  .markdown-content pre {
    @apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto my-6;
  }

  .markdown-content code {
    @apply font-mono text-sm;
  }

  .markdown-content :not(pre) > code {
    @apply bg-gray-100 text-gray-800 px-1.5 py-0.5 rounded text-sm font-mono;
  }

  .markdown-content table {
    @apply w-full border-collapse my-6;
  }

  .markdown-content th {
    @apply bg-gray-100 border border-gray-300 px-4 py-2 text-left;
  }

  .markdown-content td {
    @apply border border-gray-300 px-4 py-2;
  }

  .markdown-content hr {
    @apply my-8 border-t border-gray-200;
  }

  /* 代码高亮样式 */
  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    @apply text-gray-400;
  }

  .token.punctuation {
    @apply text-gray-300;
  }

  .token.property,
  .token.tag,
  .token.boolean,
  .token.number,
  .token.constant,
  .token.symbol,
  .token.deleted {
    @apply text-yellow-300;
  }

  .token.selector,
  .token.attr-name,
  .token.string,
  .token.char,
  .token.builtin,
  .token.inserted {
    @apply text-green-300;
  }

  .token.operator,
  .token.entity,
  .token.url,
  .language-css .token.string,
  .style .token.string {
    @apply text-yellow-100;
  }

  .token.atrule,
  .token.attr-value,
  .token.keyword {
    @apply text-blue-300;
  }

  .token.function,
  .token.class-name {
    @apply text-pink-300;
  }

  .token.regex,
  .token.important,
  .token.variable {
    @apply text-yellow-200;
  }

  /* 目录样式 */
  .table-of-contents {
    @apply bg-white rounded-lg shadow-sm p-4 mb-6 border border-gray-100;
  }

  .table-of-contents h2 {
    @apply text-xl font-bold mb-3 text-gray-800;
  }

  .table-of-contents ul {
    @apply list-none pl-0;
  }

  .table-of-contents li {
    @apply mb-2;
  }

  .table-of-contents a {
    @apply text-primary hover:text-primary-hover no-underline;
  }

  .table-of-contents .toc-level-2 {
    @apply pl-0;
  }

  .table-of-contents .toc-level-3 {
    @apply pl-4;
  }

  .table-of-contents .toc-level-4 {
    @apply pl-8;
  }


  /* 分类和标签样式 */
  .category-tag,
  .tag {
    @apply inline-block px-2 py-1 bg-opacity-10 bg-primary text-primary rounded-md text-sm mr-2 mb-2;
  }

  .category-tag:hover,
  .tag:hover {
    @apply bg-opacity-20;
  }

  /* 侧边目录导航 */
.toc-sidebar {
  @apply fixed right-6 top-20 w-full max-h-[calc(100vh-6rem)] overflow-y-auto hidden lg:block transition-opacity duration-300;
}


.toc-sidebar.visible {
  @apply opacity-100;
}

.toc-sidebar.dimmed {
  opacity: 0.2;
  &:hover {
    opacity: 1;
  }
}

.toc-sidebar-inner {
  @apply bg-gray-50/90 backdrop-blur-sm rounded-xl shadow-md p-5 border border-gray-200/50 relative;
}

.toc-sidebar h3 {
  @apply text-base font-semibold mb-4 text-gray-900;
}

.toc-sidebar ul {
  @apply list-none pl-0 text-sm;
}

.toc-sidebar li {
  @apply mb-2;
}

.toc-sidebar a {
  @apply text-gray-700 hover:text-primary hover:bg-gray-100 no-underline block py-1.5 px-2 rounded border-l-2 border-transparent transition-colors;
}

.toc-sidebar .toc-level-2 {
  @apply pl-0;
}

.toc-sidebar .toc-level-3 {
  @apply pl-4;
}

.toc-sidebar .toc-level-4 {
  @apply pl-8;
}

/* 侧边栏垂直进度条 */
.toc-progress-bar {
  @apply absolute top-0 left-0 w-1 bg-primary/80 z-10 transition-all duration-300;
}

.image-wrapper {
  max-width: 100%;
  margin: 1rem 0;
}

.image-wrapper img {
  display: block;
  max-width: 100%;
  height: auto;
  border-radius: 0.5rem; /* 可选：圆角效果 */
}



/* 顶部目录概览样式 - 竖直展开设计 */
.top-toc {
  margin-bottom: 2rem;
  border-radius: 0.5rem;
  background-color: #f8fafc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  overflow: hidden;
}

.top-toc.collapsed {
  max-height: 3.5rem;
}

.top-toc.expanded {
  max-height: 50vh;
}

.top-toc-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1.5rem;
  cursor: pointer;
  border-bottom: 1px solid #e2e8f0;
}

.top-toc-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: #334155;
}

.expand-button {
  background: none;
  border: none;
  color: #64748b;
  font-size: 0.875rem;
  cursor: pointer;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  transition: background-color 0.2s;
}

.expand-button:hover {
  background-color: #e2e8f0;
}

.top-toc-content {
  padding: 1rem 1.5rem;
  max-height: calc(50vh - 3.5rem);
  overflow-y: auto;
}

/* 竖直展开的目录样式 */
.top-toc-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
}

.top-toc-item {
  margin-bottom: 0.5rem;
}

.top-toc-item a {
  display: block;
  padding: 0.4rem 0;
  color: #334155;
  text-decoration: none;
  transition: color 0.2s;
}

.top-toc-item a:hover {
  color: #2563eb;
}

.top-toc-item.active a {
  color: #2563eb;
  font-weight: 500;
}

.top-toc-item.depth-1 {
  font-weight: 600;
}

.top-toc-item.depth-2 {
  padding-left: 1.25rem;
}

.top-toc-item.depth-3 {
  padding-left: 2.5rem;
  font-size: 0.9375rem;
}

.top-toc-item.depth-4 {
  padding-left: 3.75rem;
  font-size: 0.875rem;
}

/* 侧边栏目录样式 */
.markdown-container {
  display: flex;
  gap: 2rem;
}

.markdown-content {
  flex: 1;
  max-width: calc(100% - 14rem);
}

.toc-sidebar {
  position: sticky;
  top: 5rem;
  height: calc(100vh - 10rem);
  overflow-y: auto;
  padding-right: 1rem;
  scrollbar-width: thin;
  scrollbar-color: #cbd5e1 transparent;
}

.toc-sidebar-inner {
  padding-left: 1rem;
  border-left: 2px solid #e2e8f0;
  position: relative; /* 为进度指示器提供定位上下文 */
}

.toc-sidebar h3 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #334155;
}

.toc-sidebar ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.toc-sidebar li {
  margin-bottom: 0.5rem;
  position: relative;
}

.toc-sidebar li a {
  display: block;
  color: #64748b;
  text-decoration: none;
  font-size: 0.875rem;
  padding: 0.25rem 0;
  transition: color 0.2s;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.toc-sidebar li a:hover {
  color: #0f172a;
}

.toc-sidebar li.active-heading a {
  color: #2563eb;
  font-weight: 500;
}

.toc-level-1 {
  font-weight: 500;
}

.toc-level-2 {
  padding-left: 0.75rem;
}

.toc-level-3 {
  padding-left: 1.5rem;
}

.toc-level-4 {
  padding-left: 2.25rem;
  font-size: 0.8125rem;
}

/* 进度指示器 - 改为绝对定位，与活动项目对齐 */
.toc-progress-indicator {
  position: absolute;
  left: 0;
  width: 2px;
  background-color: #2563eb;
  transition: top 0.3s ease, height 0.3s ease;
}

/* 小屏幕样式调整 */
@media (max-width: 1024px) {
  .markdown-container {
    flex-direction: column;
  }
  
  .markdown-content {
    max-width: 100%;
  }
  
  .toc-sidebar {
    position: relative;
    top: 0;
    height: auto;
    max-height: 50vh;
    width: 100% !important;
    margin-bottom: 2rem;
  }
}

}




================================================
File: app/layout.jsx
================================================
import { Inter } from "next/font/google";
import "./globals.css";
import Header from "../components/Header.jsx";
import Footer from "../components/Footer.jsx";

const inter = Inter({ subsets: ["latin"] });

export default function RootLayout({ children }) {
  return (
    <html lang="zh-CN">
      <body className={`${inter.className} min-h-screen flex flex-col`}>
        <Header />
        <main className="flex-grow container mx-auto px-4 py-8 mt-16">{children}</main>
        <Footer />
      </body>
    </html>
  );
}


================================================
File: app/page.jsx
================================================
import Link from "next/link";
import { Calendar, Clock, Tag, BookOpen } from "lucide-react";
import { getMarkdownFiles, getPostMetadata } from "../lib/markdown";

export async function generateMetadata() {
  return {
    title: "Garhlz's blog",
    description: "分享想法、经验和知识的个人博客",
  };
}

export default async function Page() {
  let posts = [];
  try {
    const filenames = await getMarkdownFiles();
    posts = await Promise.all(
      filenames.map(async (filename) => {
        try {
          return await getPostMetadata(filename);
        } catch (error) {
          console.error(`Error parsing ${filename}:`, error);
          return null;
        }
      })
    );
    posts = posts.filter((post) => post !== null);
    posts.sort((a, b) => new Date(b.date) - new Date(a.date));
  } catch (error) {
    console.error("Error loading posts:", error);
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
      {/* 页面标题区 */}
      <header className="mb-12 text-center space-y-3">
        <h1 className="text-3xl font-bold text-gray-800 tracking-tight bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent">
          文章
        </h1>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
          已沉淀 {posts.length} 篇博文
        </p>
      </header>

      {/* 文章列表 */}
      {posts.length === 0 ? (
        <div className="max-w-md mx-auto bg-white/90 backdrop-blur-sm rounded-2xl p-8 text-center shadow-xl border-2 border-dashed border-gray-200">
          <BookOpen className="h-16 w-16 mx-auto text-gray-300 mb-4 animate-pulse" />
          <h2 className="text-xl font-medium text-gray-800 mb-2">知识库等待充盈</h2>
          <p className="text-gray-600">
            在 <code className="bg-gray-100 px-2 py-1 rounded">content</code> 目录中添加新篇章
          </p>
        </div>
      ) : (
        <div className="grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:gap-8">
          {posts.map((post) => (
            <article
              key={post.slug}
              className="group bg-white/90 backdrop-blur-sm rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 border border-gray-100 overflow-hidden flex flex-col"
            >
              {/* 封面图片 */}
              {post.coverImage && (
                <Link 
                  href={`/post/${post.slug}`} 
                  className="block aspect-video overflow-hidden relative"
                >
                  <img
                    src={post.coverImage}
                    alt={post.title}
                    className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-black/5" />
                </Link>
              )}

              {/* 内容区块 */}
              <div className="p-5 md:p-6 flex flex-col flex-1 space-y-4">
                {/* 标题 */}
                <Link href={`/post/${post.slug}`} className="block">
                  <h2 className="text-xl font-semibold text-gray-900 leading-snug mb-2 hover:text-primary transition-colors line-clamp-2">
                    {post.title}
                  </h2>
                </Link>

                {/* 元信息 */}
                <div className="flex flex-wrap items-center gap-3 text-sm text-gray-500">
                  <div className="flex items-center space-x-1">
                    <Calendar className="h-4 w-4 opacity-80" />
                    <span>{post.date}</span>
                  </div>
                  <div className="hidden sm:block w-px h-4 bg-gray-200" />
                  <div className="flex items-center space-x-1">
                    <Clock className="h-4 w-4 opacity-80" />
                    <span>{post.readingTime}min</span>
                  </div>
                </div>

                {/* 分类标签 */}
                {post.categories?.length > 0 && (
                  <div className="flex items-start gap-2">
                    <Tag className="h-4 w-4 text-gray-500 mt-1 flex-shrink-0" />
                    <div className="flex flex-wrap gap-2">
                      {post.categories.map((category) => (
                        <Link
                          key={category}
                          href={`/categories/${category}`}
                          className="px-2.5 py-1 bg-primary/5 text-primary rounded-full text-sm hover:bg-primary/10 transition-colors"
                        >
                          #{category}
                        </Link>
                      ))}
                    </div>
                  </div>
                )}

                {/* 摘要 */}
                <p className="text-gray-600 line-clamp-3 leading-relaxed flex-1">
                  {post.excerpt}
                </p>

                {/* 阅读链接 */}
                <div className="pt-2 mt-auto">
                  <Link
                    href={`/post/${post.slug}`}
                    className="inline-flex items-center font-medium text-primary hover:text-primary/80 transition-colors"
                  >
                    <span className="border-b border-dotted border-primary/30 hover:border-primary/60">
                      展开阅读
                    </span>
                    <svg 
                      className="w-4 h-4 ml-1.5 -translate-y-px" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </Link>
                </div>
              </div>
            </article>
          ))}
        </div>
      )}

      {/* 分页控制 */}
      {posts.length > 9 && (
        <div className="mt-12 flex justify-center">
          <button className="px-5 py-2.5 bg-white border border-gray-200 rounded-lg text-gray-600 hover:bg-gray-50/80 hover:border-gray-300 transition-all shadow-sm hover:shadow-md">
            加载更多 →
          </button>
        </div>
      )}
    </div>
  );
}


================================================
File: app/about/page.jsx
================================================
import MarkdownRenderer from "@/components/MarkdownRenderer";
import { getPostData } from "@/lib/markdown";

export async function generateMetadata() {
  return {
    title: "About - Garhlz's Blog",
  };
}

export default async function About() {
  let postData;

  try {
    postData = await getPostData("about");
  } catch (error) {
    console.error("Error loading about page:", error);
    postData = {
      content: `
# About Me

This is a default About page. It seems the custom \`about.md\` file could not be loaded. Please check the content directory or update this page.

---

### Basic Info
- **Name**: Garhlz  
- **Bio**: 还没来得及写简介，别急，慢慢来！  

### Contact
- **Email**: [garhlz257@163.com](mailto:garhlz257@163.com)  
- **GitHub**: [github.com/garhlz](https://github.com/garhlz)  
      `,
    };
  }

  return (
    <div className="max-w-4xl mx-auto mt-12 px-4 sm:px-6 lg:px-8">
      {/* 标题区域 */}
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-extrabold text-gray-800 sm:text-5xl tracking-tight">
          About Me
        </h1>
      </header>

      {/* 主内容区域 */}
      <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8">
        {/* 头像占位符 */}
        <div className="flex justify-center mb-6">
          <img src="/images/avatar1.jpg" alt="Garhlz's Avatar" className="w-24 h-24 rounded-full object-cover" />
        </div>

        {/* Markdown 内容 */}
        <div className="prose prose-lg max-w-none text-gray-800">
          <MarkdownRenderer content={postData.content} />
        </div>
      </div>

    </div>
  );
}


================================================
File: app/archives/page.jsx
================================================
import Link from "next/link";
import { Calendar, Archive } from "lucide-react";
import { getMarkdownFiles, getPostMetadata } from "../../lib/markdown";

async function getArchives() {
  try {
    const filenames = await getMarkdownFiles();
    const posts = await Promise.all(
      filenames.map(async (filename) => {
        try {
          return await getPostMetadata(filename);
        } catch (error) {
          console.error(`Error parsing ${filename}:`, error);
          return null;
        }
      })
    );

    const validPosts = posts.filter((post) => post !== null);
    validPosts.sort((a, b) => new Date(b.date) - new Date(a.date));

    const archives = {};
    validPosts.forEach((post) => {
      const [year, month] = post.date.split("-");
      if (!archives[year]) archives[year] = {};
      if (!archives[year][month]) archives[year][month] = [];
      archives[year][month].push(post);
    });

    return Object.keys(archives)
      .sort((a, b) => b - a)
      .map((year) => ({
        year,
        months: Object.keys(archives[year])
          .sort((a, b) => b - a)
          .map((month) => ({
            month,
            posts: archives[year][month],
          })),
      }));
  } catch (error) {
    console.error("Error fetching archives:", error);
    return [];
  }
}

export async function generateMetadata() {
  return {
    title: "归档 - Garhlz's blog",
  };
}

export default async function ArchivesPage() {
  const archives = await getArchives();

  const totalPosts = archives.reduce(
    (total, yearData) =>
      total + yearData.months.reduce((yearTotal, monthData) => yearTotal + monthData.posts.length, 0),
    0
  );

  return (
    <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
      {/* 标题区 */}
      <header className="mb-12 text-center space-y-4">
        <h1 className="text-3xl font-bold text-gray-800">
          文章归档
        </h1>
        <p className="text-lg text-gray-600">
          已归档 {totalPosts} 篇文章
        </p>
    </header>

      {/* 内容主体 */}
      {archives.length === 0 ? (
        <div className="max-w-md mx-auto bg-white/90 backdrop-blur-sm rounded-2xl p-8 text-center shadow-xl border-2 border-dashed border-gray-200">
          <div className="text-6xl mb-4">📅</div>
          <h2 className="text-xl font-medium text-gray-800 mb-2">时空等待标记</h2>
          <p className="text-gray-600">
            在内容宇宙中留下你的思想坐标
          </p>
        </div>
      ) : (
        <div className="space-y-8">
          {archives.map((yearData) => (
            <section 
              key={yearData.year} 
              className="bg-white/90 backdrop-blur-sm rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300 border border-gray-100"
            >
              {/* 年份标题 */}
              <div className="p-6 border-b border-gray-100 bg-gradient-to-r from-primary/5 to-transparent">
                <h2 className="text-2xl font-bold text-gray-900 flex items-center">
                  <span className="bg-primary/10 text-primary px-3 py-1 rounded-full text-sm mr-3">
                    {yearData.year}
                  </span>
                  <span className="text-gray-500">年</span>
                </h2>
              </div>

              {/* 月份列表 */}
              <div className="p-6 space-y-8">
                {yearData.months.map((monthData) => (
                  <article 
                    key={`${yearData.year}-${monthData.month}`}
                    className="relative group"
                  >
                    {/* 月份装饰线 */}
                    <div className="absolute left-5 top-5 bottom-5 w-0.5 bg-gradient-to-b from-gray-200/50 to-transparent" />

                    <div className="pl-12 relative">
                      {/* 月份标题 */}
                      <div className="flex items-center mb-4 -mt-1">
                        <div className="absolute left-0 w-8 h-8 rounded-full bg-primary/5 flex items-center justify-center">
                          <span className="text-sm font-medium text-primary">
                            {monthData.month.padStart(2, '0')}
                          </span>
                        </div>
                        <h3 className="text-xl font-semibold text-gray-800">{monthData.month}月</h3>
                      </div>

                      {/* 文章列表 */}
                      <ul className="space-y-4">
                        {monthData.posts.map((post) => (
                          <li 
                            key={post.slug} 
                            className="flex items-start hover:bg-gray-50/50 transition-colors duration-200 p-3 -mx-3 rounded-lg"
                          >
                            <time className="text-sm text-gray-500 w-24 flex-shrink-0 pt-1">
                              <Calendar className="h-4 w-4 inline-block mr-1 -mt-0.5" />
                              {post.date.split('-')[2]}日
                            </time>
                            <Link
                              href={`/post/${post.slug}`}
                              className="text-gray-900 hover:text-primary transition-colors leading-snug flex-1"
                            >
                              {post.title}
                              {post.categories?.length > 0 && (
                                <div className="mt-1.5 flex flex-wrap gap-2">
                                  {post.categories.map((category) => (
                                    <span 
                                      key={category} 
                                      className="px-2 py-1 bg-primary/5 text-primary rounded-full text-xs font-medium"
                                    >
                                      #{category}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </Link>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </article>
                ))}
              </div>
            </section>
          ))}
        </div>
      )}
    </div>
  );
}


================================================
File: app/categories/page.jsx
================================================
import Link from "next/link";
import { Tag } from "lucide-react";
import { getMarkdownFiles, getPostMetadata } from "../../lib/markdown";

async function getCategoriesWithPosts() {
  try {
    const filenames = await getMarkdownFiles();
    const posts = await Promise.all(
      filenames.map(async (filename) => {
        try {
          return await getPostMetadata(filename);
        } catch (error) {
          console.error(`Error parsing ${filename}:`, error);
          return null;
        }
      })
    );

    const validPosts = posts.filter((post) => post !== null);
    const categoriesMap = {};

    validPosts.forEach((post) => {
      post.categories.forEach((category) => {
        if (!categoriesMap[category]) {
          categoriesMap[category] = [];
        }
        categoriesMap[category].push({
          slug: post.slug,
          title: post.title,
          date: post.date,
        });
      });
    });

    return Object.keys(categoriesMap)
      .map((category) => ({
        name: category,
        count: categoriesMap[category].length,
        posts: categoriesMap[category].sort((a, b) => new Date(b.date) - new Date(a.date)),
      }))
      .sort((a, b) => b.count - a.count);
  } catch (error) {
    console.error("Error fetching categories:", error);
    return [];
  }
}

export async function generateMetadata() {
  return {
    title: "分类导航 - Garhlz's blog",
    description: "探索博客文章的专题分类，发现更多深度内容"
  };
}

export default async function CategoriesPage() {
  const categories = await getCategoriesWithPosts();

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* 页面标题 */}
      <header className="mb-8 sm:mb-12 text-center">
        <h1 className="text-3xl font-bold text-gray-800 tracking-tight sm:text-4xl">
        文章分类
        </h1>
        <p className="mt-4 text-lg text-gray-600 max-w-2xl mx-auto">
          共有 {categories.length} 个分类
        </p>
      </header>

      {/* 内容主体 */}
      <div className="max-w-5xl mx-auto">
        {categories.length === 0 ? (
          <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-8 text-center shadow-xl border-2 border-dashed border-gray-200">
            <div className="text-6xl mb-4">📂</div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">分类目录待完善</h2>
            <p className="text-gray-600">
              请在文章frontmatter中添加 <code className="bg-gray-100 px-2 py-1 rounded">categories</code> 字段
            </p>
          </div>
        ) : (
          <div className="grid gap-6 sm:gap-8">
            {categories.map((category) => (
              <section 
                key={category.name}
                className="bg-white/80 backdrop-blur-sm rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300 border border-gray-100"
              >
                {/* 分类标题 */}
                <div className="p-6 border-b border-gray-100 flex items-center space-x-3 bg-gradient-to-r from-primary/5 to-transparent">
                  <Tag className="h-6 w-6 text-primary" />
                  <div className="flex items-baseline space-x-2">
                    <h2 className="text-2xl font-bold text-gray-900">{category.name}</h2>
                    <span className="text-primary font-medium">{category.count}篇</span>
                  </div>
                </div>

                {/* 文章列表 */}
                <ul className="divide-y divide-gray-100/50">
                  {category.posts.map((post) => (
                    <li 
                      key={post.slug}
                      className="group hover:bg-gray-50/50 transition-colors duration-200"
                    >
                      <Link
                        href={`/post/${post.slug}`}
                        className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 sm:px-6"
                      >
                        <div className="flex-1">
                          <h3 className="text-base font-medium text-gray-900 group-hover:text-primary transition-colors">
                            {post.title}
                          </h3>
                        </div>
                        <time className="text-sm text-gray-500 mt-1 sm:mt-0 sm:ml-4 sm:w-28 sm:text-right">
                          {post.date}
                        </time>
                      </Link>
                    </li>
                  ))}
                </ul>
              </section>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


================================================
File: app/categories/[slug]/page.jsx
================================================
import Link from "next/link";
import { Calendar, Clock, ArrowLeft, Tag } from "lucide-react";
import { getMarkdownFiles, getPostMetadata } from "../../../lib/markdown";

async function getPostsByCategory(category) {
  try {
    const filenames = await getMarkdownFiles();
    const posts = await Promise.all(
      filenames.map(async (filename) => {
        try {
          return await getPostMetadata(filename);
        } catch (error) {
          console.error(`Error parsing ${filename}:`, error);
          return null;
        }
      })
    );

    const validPosts = posts.filter((post) => post !== null && post.categories.includes(category));
    return validPosts.sort((a, b) => new Date(b.date) - new Date(a.date));
  } catch (error) {
    console.error(`Error fetching posts for category ${category}:`, error);
    return [];
  }
}

export default async function CategoryPage({ params }) {
  const { slug } = params;
  const decodedCategory = decodeURIComponent(slug);
  const posts = await getPostsByCategory(decodedCategory);

  return (
    <div className="max-w-4xl mx-auto mt-8">
      <Link
        href="/categories"
        className="inline-flex items-center text-gray-600 hover:text-[rgb(var(--primary-color))] mb-6"
      >
        <ArrowLeft className="h-4 w-4 mr-2" />
        返回所有分类
      </Link>

      <div className="flex items-center mb-8">
        <Tag className="h-6 w-6 mr-2 text-[rgb(var(--primary-color))]" />
        <h1 className="text-3xl font-bold text-gray-900">分类: {decodedCategory}</h1>
        <span className="ml-2 text-gray-500">({posts.length})</span>
      </div>

      {posts.length === 0 ? (
        <div className="bg-white rounded-lg shadow-sm p-6 text-center">
          <p className="text-gray-600">该分类下暂无文章</p>
        </div>
      ) : (
        <div className="grid gap-8 md:grid-cols-2">
          {posts.map((post) => (
            <article
              key={post.slug}
              className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow"
            >
              <Link href={`/post/${post.slug}`} className="block h-full">
                <div className="p-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-2 line-clamp-2">{post.title}</h2>
                  <div className="flex items-center text-sm text-gray-500 mb-3 space-x-4">
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      <span>{post.date}</span>
                    </div>
                    <div className="flex items-center">
                      <Clock className="h-4 w-4 mr-1" />
                      <span>{post.readingTime} 分钟阅读</span>
                    </div>
                  </div>
                  <p className="text-gray-600 line-clamp-3">{post.excerpt}</p>
                  <div className="mt-4 text-[rgb(var(--primary-color))] font-medium">阅读更多 →</div>
                </div>
              </Link>
            </article>
          ))}
        </div>
      )}
    </div>
  );
}


================================================
File: app/fonts/GeistMonoVF.woff
================================================
[Non-text file]


================================================
File: app/fonts/GeistVF.woff
================================================
[Non-text file]


================================================
File: app/post/[slug]/page.jsx
================================================
import Link from "next/link";
import { ArrowLeft, Calendar, Clock, Tag } from "lucide-react";
import MarkdownRenderer from "@/components/MarkdownRenderer";
import { getPostData } from "@/lib/markdown";

export async function generateMetadata({ params }) {
  const { slug } = params;
  let postData;

  try {
    postData = await getPostData(slug);
    return {
      title: `${postData.title} - Garhlz's blog`,
      description: postData.excerpt || `探索${postData.title}的深度解析`,
    };
  } catch (error) {
    return {
      title: "文章未找到 - Garhlz's blog",
    };
  }
}

export default async function Post({ params }) {
  const { slug } = params;
  let postData;

  try {
    postData = await getPostData(slug);
  } catch (error) {
    return (
      <div className="container mx-auto p-4 min-h-screen flex items-center justify-center">
        <div className="bg-red-50/90 backdrop-blur-sm border-2 border-red-100 rounded-xl p-6 max-w-md text-center shadow-lg">
          <h1 className="text-2xl font-bold text-red-600 mb-3">🚨 文章加载失败</h1>
          <p className="text-red-500 mb-4">{error.message}</p>
          <Link 
            href="/"
            className="inline-flex items-center justify-center space-x-2 bg-red-100 hover:bg-red-200 text-red-700 px-4 py-2 rounded-lg transition-all duration-200"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>返回首页</span>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="max-w-4xl mx-auto">
        {/* 返回按钮 */}
        <Link 
          href="/" 
          className="inline-flex items-center text-gray-600 hover:text-primary mb-6 group transition-colors duration-200"
        >
          <ArrowLeft className="h-5 w-5 mr-2 group-hover:-translate-x-1 transition-transform" />
          <span className="text-sm font-medium">返回文章列表</span>
        </Link>

        {/* 文章头部 */}
        <header className="mb-8 space-y-4">
          <h1 className="text-3xl font-extrabold text-gray-900 tracking-tight sm:text-4xl">
            {postData.title}
          </h1>

          {/* 元信息 */}
          <div className="flex flex-col sm:flex-row sm:items-center gap-4 text-sm text-gray-500">
            <div className="flex items-center space-x-1">
              <Calendar className="h-4 w-4 flex-shrink-0" />
              <time>{postData.date}</time>
            </div>
            <div className="hidden sm:block">•</div>
            <div className="flex items-center space-x-1">
              <Clock className="h-4 w-4 flex-shrink-0" />
              <span>{postData.readingTime} 分钟阅读</span>
            </div>
          </div>

          {/* 分类标签 */}
          {postData.categories?.length > 0 && (
            <div className="flex items-start gap-2 flex-wrap">
              <Tag className="h-4 w-4 text-gray-500 mt-1" />
              <div className="flex flex-wrap gap-2">
                {postData.categories.map((category) => (
                  <Link
                    key={category}
                    href={`/categories/${category}`}
                    className="px-3 py-1 bg-primary/10 text-primary rounded-full text-sm hover:bg-primary/20 transition-colors"
                  >
                    #{category}
                  </Link>
                ))}
              </div>
            </div>
          )}
        </header>

        {/* 内容区域 */}
        <article className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm p-6 sm:p-8 md:p-10 mb-8">
          <MarkdownRenderer 
            content={postData.content} 
            className="prose prose-sm sm:prose-base max-w-none 
              prose-headings:font-semibold
              prose-a:text-primary hover:prose-a:underline
              prose-blockquote:border-l-4 prose-blockquote:border-primary/50
              prose-code:before:content-none prose-code:after:content-none
              prose-code:bg-gray-100 prose-code:px-2 prose-code:py-1 prose-code:rounded"
          />
        </article>

        {/* 底部导航 */}
        <div className="border-t border-gray-100 pt-8">
          <Link
            href="/"
            className="inline-flex items-center space-x-2 text-gray-600 hover:text-primary transition-colors"
          >
            <ArrowLeft className="h-5 w-5" />
            <span className="font-medium">浏览更多文章</span>
          </Link>
        </div>
      </div>
    </div>
  );
}


================================================
File: components/Footer.jsx
================================================
import Link from "next/link"

export default function Footer() {
  return (
    <footer className="bg-header-bg border-t border-gray-200 py-8">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <div className="mb-4 md:mb-0">
            <p className="text-gray-600">漏 {new Date().getFullYear()} Garhlz All Rights Reserved.</p>
          </div>
          <div className="flex space-x-6">
            <Link href="/" className="text-gray-600 hover:text-primary transition-colors">
              棣栭〉
            </Link>
            <Link href="/categories" className="text-gray-600 hover:text-primary transition-colors">
              鍒嗙被
            </Link>
            <Link href="/archives" className="text-gray-600 hover:text-primary transition-colors">
              褰掓。
            </Link>
            <Link href="/about" className="text-gray-600 hover:text-primary transition-colors">
              鍏充簬
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
}




================================================
File: components/Header.jsx
================================================
"use client" 

import { useState, useEffect } from "react"
import Link from "next/link"
import { Home, User, Archive, Tag, Github, Twitter } from "lucide-react"

export default function Header() {
  const [scrolled, setScrolled] = useState(false)

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10)
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        scrolled ? "bg-header-bg shadow-md py-2" : "bg-header-bg py-4"
      }`}
    >
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row md:items-center">
          {/* 第一行：标题居中，社交链接靠右（移动端） / 标题靠左（桌面端） */}
          <div className="flex justify-between items-center w-full">
            {/* 移动端左侧留空，桌面端不需要 */}
            <div className="w-12 md:hidden"></div>
            
            {/* 标题：移动端居中，桌面端靠左 */}
            <div className="flex-1 flex justify-center md:justify-start">
              <Link href="/" className="text-xl md:text-xl font-bold text-gray-800 hover:text-primary transition-colors">
                Garhlz's Blog
              </Link>
            </div>
            
            {/* 社交链接在移动端显示，桌面端隐藏 */}
            <div className="flex items-center space-x-4 md:hidden w-12 justify-end">
              <a
                href="https://github.com/garhlz"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-primary transition-colors"
              >
                <Github className="h-5 w-5" />
              </a>
              <a
                href="https://twitter.com/"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-primary transition-colors"
              >
                <Twitter className="h-5 w-5" />
              </a>
            </div>
          </div>

          {/* 第二行（移动端导航平均分布占满整行，按钮放大） / 导航+社交链接靠右（桌面端） */}
          <div className="flex justify-between items-center mt-4 md:mt-0 w-full md:w-auto md:ml-auto">
            {/* 导航选项 */}
            <nav className="flex w-full md:w-auto items-center md:space-x-6 whitespace-nowrap">
              {/* 移动端：均匀分布，添加页边距 */}
              <div className="flex justify-between w-full px-4 md:hidden">
                <Link href="/" className="flex flex-col items-center text-gray-600 hover:text-primary transition-colors">
                  <Home className="h-6 w-6" />
                  <span className="mt-1 text-sm">首页</span>
                </Link>
                <Link
                  href="/categories"
                  className="flex flex-col items-center text-gray-600 hover:text-primary transition-colors"
                >
                  <Tag className="h-6 w-6" />
                  <span className="mt-1 text-sm">分类</span>
                </Link>
                <Link
                  href="/archives"
                  className="flex flex-col items-center text-gray-600 hover:text-primary transition-colors"
                >
                  <Archive className="h-6 w-6" />
                  <span className="mt-1 text-sm">归档</span>
                </Link>
                <Link
                  href="/about"
                  className="flex flex-col items-center text-gray-600 hover:text-primary transition-colors"
                >
                  <User className="h-6 w-6" />
                  <span className="mt-1 text-sm">关于</span>
                </Link>
              </div>
              
              {/* 桌面端：水平排列 */}
              <div className="hidden md:flex md:space-x-6">
                <Link href="/" className="flex items-center space-x-1 text-gray-600 hover:text-primary transition-colors">
                  <Home className="h-4 w-4" />
                  <span>首页</span>
                </Link>
                <Link
                  href="/categories"
                  className="flex items-center space-x-1 text-gray-600 hover:text-primary transition-colors"
                >
                  <Tag className="h-4 w-4" />
                  <span>分类</span>
                </Link>
                <Link
                  href="/archives"
                  className="flex items-center space-x-1 text-gray-600 hover:text-primary transition-colors"
                >
                  <Archive className="h-4 w-4" />
                  <span>归档</span>
                </Link>
                <Link
                  href="/about"
                  className="flex items-center space-x-1 text-gray-600 hover:text-primary transition-colors"
                >
                  <User className="h-4 w-4" />
                  <span>关于</span>
                </Link>
              </div>
            </nav>

            {/* 社交链接仅在桌面端显示，紧随导航 */}
            <div className="hidden md:flex items-center space-x-4 ml-6">
              <a
                href="https://github.com/garhlz"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-primary transition-colors"
              >
                <Github className="h-5 w-5" />
              </a>
              <a
                href="https://twitter.com/"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-primary transition-colors"
              >
                <Twitter className="h-5 w-5" />
              </a>
            </div>
          </div>
        </div>
      </div>
    </header>
  )
}


================================================
File: components/MarkdownRenderer.jsx
================================================
"use client";

import { useEffect, useState, useRef } from "react";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import remarkMath from "remark-math";
import remarkRehype from "remark-rehype";
import rehypeRaw from "rehype-raw";
import rehypePrism from "rehype-prism-plus";
import rehypeKatex from "rehype-katex";
import rehypeStringify from "rehype-stringify";
import { visit } from "unist-util-visit";
import "katex/dist/katex.min.css";

function extractHeadings() {
  return (tree, file) => {
    const headings = [];
    const idCounts = new Map();
    visit(tree, "heading", (node) => {
      const text = node.children
        .filter((n) => n.type === "text")
        .map((n) => n.value)
        .join("");
      let id = text
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^\w-]+/g, "");
      if (idCounts.has(id)) {
        const count = idCounts.get(id) + 1;
        idCounts.set(id, count);
        id = `${id}-${count}`;
      } else {
        idCounts.set(id, 0);
      }
      node.data = node.data || {};
      node.data.hProperties = node.data.hProperties || {};
      node.data.hProperties.id = id;
      headings.push({ depth: node.depth, text, id });
    });
    file.data.headings = headings;
  };
}

const MarkdownRenderer = ({ content }) => {
  const [htmlContent, setHtmlContent] = useState("");
  const [headings, setHeadings] = useState([]);
  const [activeHeadingIndex, setActiveHeadingIndex] = useState(0);
  const [isTopTocExpanded, setIsTopTocExpanded] = useState(false);
  const sidebarRef = useRef(null);
  const sidebarItemsRef = useRef([]);
  const activeItemRef = useRef(null);
  const progressIndicatorRef = useRef(null);

  // 初始化引用数组
  useEffect(() => {
    sidebarItemsRef.current = sidebarItemsRef.current.slice(0, headings.length);
  }, [headings]);

  useEffect(() => {
    const processContent = async () => {
      try {
        const vfile = await unified()
          .use(remarkParse)
          .use(extractHeadings)
          .use(remarkGfm)
          .use(remarkMath)
          .use(remarkRehype, { allowDangerousHtml: true })
          .use(rehypeRaw)
          .use(rehypePrism, { showLineNumbers: true, ignoreMissing: true })
          .use(rehypeKatex)
          .use(rehypeStringify)
          .process(content);
        setHtmlContent(String(vfile));
        setHeadings(vfile.data.headings || []);
      } catch (error) {
        console.error("Error rendering Markdown:", error);
        setHtmlContent("<p>渲染文章时出错，请检查 Markdown 格式。</p>");
      }
    };
    processContent();
  }, [content]);

  useEffect(() => {
    const updateActiveHeading = () => {
      const scrollTop = window.scrollY;
      const headerHeight = 64; // 假设顶部导航栏高度

      const headingElements = headings
        .map((h) => document.getElementById(h.id))
        .filter(Boolean);

      if (headingElements.length === 0) {
        setActiveHeadingIndex(0);
        return;
      }

      let newActiveIndex = 0;
      for (let i = 0; i < headingElements.length; i++) {
        const rect = headingElements[i].getBoundingClientRect();
        if (rect.top + window.scrollY - headerHeight > scrollTop) {
          if (i > 0) newActiveIndex = i - 1;
          break;
        }
        newActiveIndex = i;
      }

      setActiveHeadingIndex(newActiveIndex);
    };

    window.addEventListener("scroll", updateActiveHeading);
    updateActiveHeading();

    return () => window.removeEventListener("scroll", updateActiveHeading);
  }, [htmlContent, headings]);

  // 在活动标题变化时更新进度条位置
  useEffect(() => {
    if (activeItemRef.current && progressIndicatorRef.current && sidebarRef.current) {
      const sidebar = sidebarRef.current;
      const activeItem = activeItemRef.current;
      const progressIndicator = progressIndicatorRef.current;
      
      // 计算活动项相对于侧边栏的位置
      const activeItemTop = activeItem.offsetTop;
      const activeItemHeight = activeItem.offsetHeight;
      
      // 更新进度指示器位置，使其对齐到活动项目
      progressIndicator.style.top = `${activeItemTop}px`;
      progressIndicator.style.height = `${activeItemHeight}px`;
      
      // 自动滚动侧边栏，使活动项目可见
      const sidebarHeight = sidebar.clientHeight;
      const activeItemBottom = activeItemTop + activeItemHeight;
      
      if (activeItemTop < sidebar.scrollTop) {
        sidebar.scrollTop = activeItemTop - 20; // 添加一些上部空间
      } else if (activeItemBottom > sidebar.scrollTop + sidebarHeight) {
        sidebar.scrollTop = activeItemBottom - sidebarHeight + 20; // 添加一些下部空间
      }
    }
  }, [activeHeadingIndex]);

  const renderTopToc = () => {
    if (headings.length === 0) return null;
    
    return (
      <div className={`top-toc ${isTopTocExpanded ? 'expanded' : 'collapsed'}`}>
        <div className="top-toc-header" onClick={() => setIsTopTocExpanded(!isTopTocExpanded)}>
          <h3>目录概览</h3>
          <button className="expand-button">
            {isTopTocExpanded ? '收起' : '展开'}
          </button>
        </div>
        
        {isTopTocExpanded && (
          <div className="top-toc-content">
            <ul className="top-toc-list">
              {headings.map((heading, index) => (
                <li 
                  key={heading.id}
                  className={`top-toc-item depth-${heading.depth} ${index === activeHeadingIndex ? 'active' : ''}`}
                >
                  <a href={`#${heading.id}`}>{heading.text}</a>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  };

  const renderSidebar = () => {
    if (headings.length === 0) return null;

    return (
      <div className="toc-sidebar lg:w-48" ref={sidebarRef}>
        <div className="toc-sidebar-inner">
          <h3>目录</h3>
          <ul>
            {headings.map((heading, index) => (
              <li
                key={heading.id}
                ref={(el) => {
                  sidebarItemsRef.current[index] = el;
                  if (index === activeHeadingIndex) {
                    activeItemRef.current = el;
                  }
                }}
                className={`toc-level-${Math.min(heading.depth, 4)} ${
                  index === activeHeadingIndex ? "active-heading" : ""
                }`}
              >
                <a href={`#${heading.id}`}>{heading.text}</a>
              </li>
            ))}
          </ul>
        </div>
        <div
          className="toc-progress-indicator"
          ref={progressIndicatorRef}
        />
      </div>
    );
  };

  return (
    <>
      {renderTopToc()}
      <div className="markdown-container">
        {htmlContent && <div className="markdown-content" dangerouslySetInnerHTML={{ __html: htmlContent }} />}
        {renderSidebar()}
      </div>
    </>
  );
};

export default MarkdownRenderer;


================================================
File: lib/markdown.js
================================================
const fs = require("fs");
const path = require("path");
const matter = require("gray-matter");

async function getMarkdownFiles() {
  const postsDirectory = path.join(process.cwd(), "content");
  if (!fs.existsSync(postsDirectory)) return [];
  const filenames = fs.readdirSync(postsDirectory);
  return filenames.filter((filename) => filename.endsWith(".md"));
}

async function getPostMetadata(filename) {
  const filePath = path.join(process.cwd(), "content", filename);
  const fileContent = fs.readFileSync(filePath, "utf-8");
  const { data, content } = matter(fileContent);

  const title = data.title || extractTitleFromContent(content);
  const excerpt = data.excerpt || createExcerpt(content);
  const wordCount = content.trim().split(/\s+/).length;
  const readingTime = Math.max(1, Math.ceil(wordCount / 200));

  // 确保 categories 始终是数组并去重
  let categories = data.categories || [];
  if (typeof categories === "string") {
    categories = categories.split(",").map((item) => item.trim());
  }
  categories = [...new Set(categories)]; // 去重

  return {
    slug: filename.replace(".md", ""),
    title,
    date: data.date ? new Date(data.date).toISOString().split("T")[0] : new Date().toISOString().split("T")[0],
    excerpt,
    readingTime,
    categories,
  };
}

async function getPostData(slug) {
  const decodedSlug = decodeURIComponent(slug);
  const filePath = path.join(process.cwd(), "content", `${decodedSlug}.md`);
  if (!fs.existsSync(filePath)) {
    throw new Error(`文件未找到: ${filePath}`);
  }

  const fileContent = fs.readFileSync(filePath, "utf-8");
  const { data, content } = matter(fileContent);

  const title = data.title || extractTitleFromContent(content);
  const wordCount = content.trim().split(/\s+/).length;
  const readingTime = Math.max(1, Math.ceil(wordCount / 200));

  // 确保 categories 始终是数组并去重
  let categories = data.categories || [];
  if (typeof categories === "string") {
    categories = categories.split(",").map((item) => item.trim());
  }
  categories = [...new Set(categories)]; // 去重

  return {
    slug: decodedSlug,
    title,
    date: data.date ? new Date(data.date).toISOString().split("T")[0] : new Date().toISOString().split("T")[0],
    content,
    excerpt: data.excerpt || createExcerpt(content),
    readingTime,
    categories,
  };
}

function extractTitleFromContent(content) {
  const titleMatch = content.match(/^#\s+(.*)$/m);
  return titleMatch ? titleMatch[1] : "无标题";
}

function createExcerpt(content) {
  return (
    content
      .replace(/^#\s+.*$/m, "")
      .replace(/!\[.*?\]\(.*?\)/g, "")
      .replace(/\[.*?\]\(.*?\)/g, "$1")
      .replace(/\s+/g, " ")
      .trim()
      .slice(0, 150) + "..."
  );
}

module.exports = { getMarkdownFiles, getPostMetadata, getPostData };


================================================
File: lib/utils.js
================================================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}


